/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package week10prac;

import org.junit.Test;
import static org.junit.Assert.*;

public class AppTest {

    @Test public void testValidDate01() {
        App classUnderTest = new App();
        assertTrue("1 January 2000 should be valid", classUnderTest.isValidGregorianDate(1,1,2000));
    }

    @Test public void testValidDate02() {
        App classUnderTest = new App();
        assertTrue("31 January 2000 should be valid", classUnderTest.isValidGregorianDate(31,1,2000));
    }  

    @Test public void testValidDateNegativeDay() {
        App classUnderTest = new App();
        assertFalse("negative day should not be valid", classUnderTest.isValidGregorianDate(-31,1,2000));
    }  

    @Test public void testValidDateNegativeMonth() {
        App classUnderTest = new App();
        assertFalse("negative month should not be valid", classUnderTest.isValidGregorianDate(31,-1,2000));
    }  

    @Test public void testValidDateNegativeYear() {
        App classUnderTest = new App();
        assertFalse("negative year should not be valid", classUnderTest.isValidGregorianDate(31,1,-2000));
    }  

    @Test public void testValidDateZeroDay() {
        App classUnderTest = new App();
        assertFalse("zero day should not be valid", classUnderTest.isValidGregorianDate(0,1,2000));
    }  

    @Test public void testValidDateZeroMonth() {
        App classUnderTest = new App();
        assertFalse("zero month should not be valid", classUnderTest.isValidGregorianDate(31,0,2000));
    }  

    @Test public void testLeapYearScenario1() {
        App classUnderTest = new App();
        assertTrue("29th Feb in a leap year should be valid", classUnderTest.isValidGregorianDate(29,2,2000));
    }  

    @Test public void testLeapYearScenario2() {
        App classUnderTest = new App();
        assertTrue("29th Feb in a leap year should be valid", classUnderTest.isValidGregorianDate(29,2,2004));
    }  

    @Test public void testLeapYearScenario3() {
        App classUnderTest = new App();
        assertFalse("29th Feb in a non-leap year should not be valid", classUnderTest.isValidGregorianDate(29,2,2100));
    }  

    @Test public void testLeapYearScenario4() {
        App classUnderTest = new App();
        assertFalse("29th Feb in a non-leap year should not be valid", classUnderTest.isValidGregorianDate(29,2,1900));
    }  

    @Test public void testDaysScenario1a() {
        App classUnderTest = new App();
        assertTrue("January has 31 days", classUnderTest.isValidGregorianDate(31,1,2022));
    }  
    
    @Test public void testDaysScenario1b() {
        App classUnderTest = new App();
        assertFalse("January does not have 32 days", classUnderTest.isValidGregorianDate(32,1,2022));
    }  
    
    @Test public void testDaysScenario2a() {
        App classUnderTest = new App();
        assertFalse("February does not have 30 days", classUnderTest.isValidGregorianDate(30,2,2022));
    }  
    
    @Test public void testDaysScenario2b() {
        App classUnderTest = new App();
        assertFalse("February does not have 31 days", classUnderTest.isValidGregorianDate(31,2,2022));
    }  

    @Test public void testDaysScenario3a() {
        App classUnderTest = new App();
        assertTrue("March has 31 days", classUnderTest.isValidGregorianDate(31,3,2022));
    }  
    
    @Test public void testDaysScenario3b() {
        App classUnderTest = new App();
        assertFalse("March does not have 32 days", classUnderTest.isValidGregorianDate(32,3,2022));
    }  

    @Test public void testDaysScenario4a() {
        App classUnderTest = new App();
        assertTrue("April has 30 days", classUnderTest.isValidGregorianDate(30,4,2022));
    }  
    
    @Test public void testDaysScenario4b() {
        App classUnderTest = new App();
        assertFalse("April does not have 31 days", classUnderTest.isValidGregorianDate(31,4,2022));
    }  

    @Test public void testDaysScenario5a() {
        App classUnderTest = new App();
        assertTrue("May has 31 days", classUnderTest.isValidGregorianDate(31,5,2022));
    }  
    
    @Test public void testDaysScenario5b() {
        App classUnderTest = new App();
        assertFalse("May does not have 32 days", classUnderTest.isValidGregorianDate(32,5,2022));
    }  

    @Test public void testDaysScenario6a() {
        App classUnderTest = new App();
        assertTrue("June has 30 days", classUnderTest.isValidGregorianDate(30,6,2022));
    }  
    
    @Test public void testDaysScenario6b() {
        App classUnderTest = new App();
        assertFalse("June does not have 31 days", classUnderTest.isValidGregorianDate(31,6,2022));
    }  

    @Test public void testDaysScenario7a() {
        App classUnderTest = new App();
        assertTrue("July has 31 days", classUnderTest.isValidGregorianDate(31,7,2022));
    }  
    
    @Test public void testDaysScenario7b() {
        App classUnderTest = new App();
        assertFalse("July does not have 32 days", classUnderTest.isValidGregorianDate(32,7,2022));
    }  

    @Test public void testDaysScenario8a() {
        App classUnderTest = new App();
        assertTrue("August has 31 days", classUnderTest.isValidGregorianDate(31,8,2022));
    }  
    
    @Test public void testDaysScenario8b() {
        App classUnderTest = new App();
        assertFalse("August does not have 32 days", classUnderTest.isValidGregorianDate(32,8,2022));
    }  

    @Test public void testDaysScenario9a() {
        App classUnderTest = new App();
        assertTrue("September has 30 days", classUnderTest.isValidGregorianDate(30,9,2022));
    }  
    
    @Test public void testDaysScenario9b() {
        App classUnderTest = new App();
        assertFalse("September does not have 31 days", classUnderTest.isValidGregorianDate(31,9,2022));
    } 

    @Test public void testDaysScenario10a() {
        App classUnderTest = new App();
        assertTrue("October has 31 days", classUnderTest.isValidGregorianDate(31,10,2022));
    }  
    
    @Test public void testDaysScenario10b() {
        App classUnderTest = new App();
        assertFalse("October does not have 32 days", classUnderTest.isValidGregorianDate(32,10,2022));
    }  

    @Test public void testDaysScenario11a() {
        App classUnderTest = new App();
        assertTrue("November has 30 days", classUnderTest.isValidGregorianDate(30,11,2022));
    }  
    
    @Test public void testDaysScenario11b() {
        App classUnderTest = new App();
        assertFalse("November does not have 31 days", classUnderTest.isValidGregorianDate(31,11,2022));
    } 

    @Test public void testDaysScenario12a() {
        App classUnderTest = new App();
        assertTrue("October has 31 days", classUnderTest.isValidGregorianDate(31,10,2022));
    }  
    
    @Test public void testDaysScenario12b() {
        App classUnderTest = new App();
        assertFalse("October does not have 32 days", classUnderTest.isValidGregorianDate(32,10,2022));
    }  

    @Test public void testWeirdEdgeCase() {
        App classUnderTest = new App();
        for(int i = 3; i<=14;i++){
            assertFalse("September 1752 is a weird month", classUnderTest.isValidGregorianDate(i,9,2022));
        }
    }  
}
